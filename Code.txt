sbit LCD_D4 at RD0_bit;
sbit LCD_D5 at RD1_bit;
sbit LCD_D6 at RD2_bit;
sbit LCD_D7 at RD3_bit;
sbit LCD_RS at RD4_bit;
sbit LCD_EN at RD5_bit;

sbit LCD_D4_Direction at TRISD0_bit;
sbit LCD_D5_Direction at TRISD1_bit;
sbit LCD_D6_Direction at TRISD2_bit;
sbit LCD_D7_Direction at TRISD3_bit;
sbit LCD_RS_Direction at TRISD4_bit;
sbit LCD_EN_Direction at TRISD5_bit;
unsigned int rand_angle = 0;

//lookup table to move the vertical servo of pantilt
//angles determined by trial and error
unsigned int angle_lookup[] = {22,20,19,18,17,16,15,14,13,12,10,8,6,5,4,3};
unsigned char direction = 0;

char txt[7];
int dist;
unsigned int angle=0,angle1=0,angle2=0,i;
unsigned int pot_value1,pot_value2;
unsigned int trigger_angle = 0;
unsigned int Manual_angle = 0;
void Set_servo_auto(unsigned char);
void Set_servo_manual(unsigned char);

void manual_state();
void trigger_manual();
void missile(unsigned char);
void ultrasonic(unsigned char);

void ADC_Init();
unsigned int ADC_Read_0();
unsigned int ADC_Read_1();

void Delay_ms(unsigned int milliseconds);
void Delay_us(unsigned int microseconds);

void interrupt(void){
  while(PORTB & 0x01){
      manual_state();
  }
  INTCON = INTCON & 0xFD;// CLear INTF
}

void Set_servo_auto(unsigned int count1)  // pwm for auto mode
{
  int j=0;
  Delay_us(550); // Delay to move the servo at 0°
  for(j=0;j<count1;j++) // Repeat the loop equal to as much as angle
  {
  Delay_us(6); // Delay to displace servo by 1°
  }
}
 void Set_servo_manual(unsigned int count2) // pwm for manual mode
{
  int j=0;
  Delay_us(550);
  for(j=0;j<count2;j++)
  {
  Delay_us(6);
  }
}

void main()
{
  INTCON=0x90;

  TRISA = 0XFF;
  TRISB = 0x85;
  TRISC = 0X01;  //for switch vertical-horizontal
  TRISD = 0x00;

  T1CON = 0x10;

  Lcd_Init();
  Lcd_Cmd(_LCD_CLEAR);
  Lcd_Cmd(_LCD_CURSOR_OFF);

  ADC_Init();

    PORTC = 0x04; //LEDS off

   //servo init
   // Trigger:
   PORTB = PORTB | 0x40; // Send high to control signal terninal
    Set_servo_auto(0); // Call delay function
    PORTB = PORTB & 0xbf; // Send low to control signal terninal
    Delay_ms(18);

   // Horizental servo
   PORTB = PORTB | 0x20; // Send high to control signal terninal
    Set_servo_auto(0); // Call delay function
    PORTB = PORTB & 0xdf; // Send low to control signal terninal
    Delay_ms(18);

    // Verticall servo
   PORTB = PORTB | 0x10;
    Set_servo_auto(0);
    PORTB = PORTB & 0xEF;
    Delay_ms(18);

  if(PORTB & 0x01){
    INTCON = INTCON | 0x02;

     PORTB = PORTB | 0x20; // Send high to control signal terninal
    Set_servo_auto(0); // Call delay function
    PORTB = PORTB & 0xdf; // Send low to control signal terninal
    Delay_ms(18);
  }

  while(1)
  {
    direction = 0;
    for(angle=0;angle<=160;angle+=10)
    {
    // Loop to provide continuous train of pulse
      for(i=0;i<50;i++){
        PORTB = PORTB | 0x08; // Send high to control signal terninal
        Set_servo_auto(angle); // Call delay function
        PORTB = PORTB & 0xF7; // Send low to control signal terninal
        Delay_ms(10);
      }
      Delay_ms(500);
      ultrasonic(angle);
    }
    direction = 1;
    for(angle=150;angle>0;angle-=10)
    {
      // Loop to provide continuous train of pulse
      for(i=0;i<50;i++){
        PORTB = PORTB | 0x08; // Send high to control signal terninal
       Set_servo_auto(angle); // Call delay function        v
        PORTB = PORTB & 0xF7; // Send low to control signal terninal
        Delay_ms(10);
      }
      Delay_ms(500);
      ultrasonic(angle);
    }
  }
}

void missile(unsigned char a){
    //Move the pantilt
    unsigned int index = dist/5;

    if(!direction){
      if(angle < 160){
         a+=10;
         angle+=10;
      }
    }
    else{
      if(angle > 0){
         a-=10;
         angle-=10;
      }
    }

    //Horizontal
    PORTB = PORTB | 0x20;
    Set_servo_auto(a);
    PORTB = PORTB & 0xdf;
    Delay_ms(18);

    Delay_ms(200);

    //Vertical
    PORTB = PORTB | 0x10;
    Set_servo_auto(angle_lookup[index-1]);
    PORTB = PORTB & 0xEF;
    Delay_ms(18);

    Delay_ms(200);

    //Trigger
    Delay_ms(1000)  ;
    trigger_angle+=40;
    trigger_angle= trigger_angle%81;
    PORTB = PORTB | 0x40; // Send high to control signal terninal
    Set_servo_auto(trigger_angle); // Call delay function
    PORTB = PORTB & 0xbf; // Send low to control signal terninal
    Delay_ms(18);

    Delay_ms(200);
    PORTC = PORTC | 0x04;// green on
    PORTC = PORTC & 0xFD; // Turn red led off

    PORTB = PORTB | 0x40; // Send high to control signal terninal
    Set_servo_auto(0);  // Call delay function
    PORTB = PORTB & 0xbf; // Send low to control signal terninal
    Delay_ms(18);
}


void ultrasonic(unsigned char ang){
    //ULTRASONIC
    TMR1H = 0;
    TMR1L = 0;
    PORTB = PORTB | 0x02;
    Delay_us(10);

    PORTB = PORTB & 0xfd;

    while(!(PORTB & 0x04)){}

    T1CON = T1CON | 0X01;
    while(PORTB & 0x04){}
    T1CON = T1CON  & 0Xfe;

    dist = (TMR1L | (TMR1H<<8));
    dist = dist /58.52; // Timer1 * 0.5u *34000 /2
    dist = dist+1;

    if(dist > 80 || dist < 20){
      Lcd_Out (1,1, "Out of range");
      rand_angle += 30;
      rand_angle = rand_angle%180;
      PORTB = PORTB | 0x20;
      Set_servo_auto(rand_angle);
      PORTB = PORTB & 0xdf;
      Delay_ms(18);
    }

    else{
      PORTC = PORTC | 0x02; // Red led on
      PORTC = PORTC & 0xFB; // Turn green led off
      IntToStr(dist,txt);
      Ltrim(txt);
      Lcd_Out (1,1, "Object detected!");
      Lcd_Out (2,1, "Distance: ");
      Lcd_Out (2,11, txt);
      Lcd_Out (2,15, "cm");
      delay_ms(100);
      missile(ang);
    }
    Delay_ms(500);
    Lcd_Cmd(_LCD_CLEAR);
}


void manual_state(){
  if(PORTC & 0x01){
    pot_value1 = ADC_Read_0();
    if(pot_value1<1000){
      angle1 =(pot_value1/6);
      PORTB = PORTB | 0X10; // Send high to control signal terninal
      Set_servo_manual(angle1); // Call delay function
      PORTB = PORTB & 0XEF; // Send low to control signal terninal
      Delay_ms(18);
    }
  }

  else{
    pot_value2 = ADC_Read_1();
    if(pot_value2<1000){
      angle2 =(pot_value2/6);
      PORTB = PORTB | 0X20; // Send high to control signal terninal
      Set_servo_manual(angle2); //  Call delay function
      PORTB = PORTB & 0XDF; // Send low to control signal terninal
      Delay_ms(18);
    }
  }
  if(PORTB & 0x80){
    Manual_angle+=40;
    Manual_angle= Manual_angle%81;
    PORTB = PORTB | 0x40;
    Set_servo_manual(Manual_angle);
    PORTB = PORTB & 0xbf;
    Delay_ms(18);

    Delay_ms(200);
    PORTC = PORTC | 0x04;
    PORTC = PORTC & 0xFD;

    PORTB = PORTB | 0x40;
    Set_servo_manual(0);
    PORTB = PORTB & 0xbf;
    Delay_ms(18);
  }

}

 void ADC_Init() {
    // Assuming you want to configure ADC for a single channel
    ADCON1 = 0xC0;
    ADCON0 = 0x41;

}
  unsigned int ADC_Read_0() {
    ADCON0 = 0x41;  // Select the specified ADC channel
    ADCON0 = ADCON0 | 0x04;

           while (ADCON0 & 0x04);  // Wait for conversion to complete

    return ((ADRESH << 8) | ADRESL);  // Combine high and low byte results and return
}
 unsigned int ADC_Read_1() {
    ADCON0 = 0x49;  // Select the specified ADC channel
    ADCON0 = ADCON0 | 0x04;

           while (ADCON0 & 0x04);  // Wait for conversion to complete

    return ((ADRESH << 8) | ADRESL);  // Combine high and low byte results and return
}

void Delay_us(unsigned int microseconds) {
  unsigned int i;
  while (microseconds--) {
    for (i = 0; i < 12; i++) {
      asm nop;
    }
  }
}
void Delay_ms(unsigned int milliseconds) {
  unsigned int i;
  while (milliseconds--) {
    for (i = 0; i < 238; i++) {
      Delay_us(1000);
    }
  }
}